     1                                  %include "init.inc"
     2                              <1> READ_CYLINDERS equ 10									; 읽을 실린더 수
     3                              <1> FLOPPY_SEGMENT equ 0x07e0								; 읽기 시작할 메모리의 세그먼트
     4                              <1> 
     5                              <1> KERNEL_SEGMENT equ ((0x07e0 * 0x10 + 0x4200 - 0x200) / 0x10)		; 커널의 위치 (0xc000 = 0x07e0 * 0x10 + 0x4200 - 0x200)
     6                                  
     7                                  [org 0x7c00]
     8                                  [bits 16]
     9 00000000 EB4E                    	jmp start
    10                                  
    11                                  ; fat12 파일 시스템의 헤더
    12 00000002 00                      db 0						; fat12의 헤더가 이 다음부터 시작하기 때문에, 1byte를 넣음
    13 00000003 434C5542434F5330        db "CLUBCOS0"				; 부트섹터의 이름을 8글자로 적음
    14 0000000B 0002                    dw 512						; 1섹터의 크기(바이트 단위)
    15 0000000D 01                      db 1						; 클러스터의 크기(섹터 단위, fat12에선 1섹터
    16 0000000E 0100                    dw 1						; 예약된 섹터의 수
    17 00000010 02                      db 2						; 디스크의 FAT의 수(fat12에선 2)
    18 00000011 E000                    dw 224						; 루트 디렉터리 엔트리의 수(보통은 224엔트리)
    19 00000013 400B                    dw 2880						; 디스크의 총 섹터 수
    20 00000015 F0                      db 0xf0						; 미디어 타입(0xf0으로 해야 함)
    21 00000016 0900                    dw 9						; FAT 하나당 섹터 수(fat12에선 9)
    22 00000018 1200                    dw 18						; 1트랙당 섹터 수(플로피 디스크에선 18)
    23 0000001A 0200                    dw 2						; 헤드의 수
    24 0000001C 00000000                dd 0						; 파티션을 쓰지 않으므로 0
    25 00000020 400B0000                dd 2880						; 섹터 수를 다시 씀
    26 00000024 000029                  db 0, 0, 0x29				; 잘 모르겠습니다ㅡ.ㅡ
    27 00000027 FFFFFFFF                dd 0xffffffff				; 책에선 '아마 볼륨 시리얼 번호'라네요
    28 0000002B 434C5542434F533020-     db "CLUBCOS0   "			; 디스크의 이름(11바이트)
    29 00000034 2020               
    30 00000036 4641543132202020        db "FAT12   "				; 파일 시스템의 이름(8바이트)
    31 0000003E 00<rept>                times 18 db 0				; 18바이트 비움
    32                                  
    33                                  start:
    34 00000050 8CC8                    	mov ax, cs
    35 00000052 8ED8                    	mov ds, ax				; ds를 cs와 같게 한다
    36                                  
    37 00000054 B80000                  	mov ax, 0				; 스택을 설정한다
    38 00000057 8ED0                    	mov ss, ax				; 스택의 세그먼트 : 0
    39 00000059 BC007C                  	mov sp, 0x7c00			; 스택의 오프셋 : 0x7c00
    40                                  
    41 0000005C BE[6F00]                	mov si, boot_msg		; 부팅 메세지 출력문
    42                                  bootmsg_putloop:
    43 0000005F 8A04                    	mov al, [si]			; 메세지의 한 글자 읽음
    44 00000061 46                      	inc si					; si++
    45 00000062 3C00                    	cmp al, 0				; al과 0을 비교
    46 00000064 7437                    	je bootmsg_end			; 0이면 bootmsg_end으로 jmp
    47 00000066 B40E                    	mov ah, 0x0e			; ah=0x0e -> 화면에 한 글자 출력
    48 00000068 BB0F00                  	mov bx, 15				; 색 코드
    49 0000006B CD10                    	int 0x10				; BIOS 호출(al엔 글자 코드)
    50 0000006D EBF0                    	jmp bootmsg_putloop		; 루프를 돔
    51                                  
    52                                  boot_msg:
    53 0000006F 0A0A                    	db 0x0a, 0x0a			; 개행 ASCII 코드
    54 00000071 546869732069732043-     	db "This is Clubcos0 boot loader, booting...."
    55 0000007A 6C7562636F73302062-
    56 00000083 6F6F74206C6F616465-
    57 0000008C 722C20626F6F74696E-
    58 00000095 672E2E2E2E         
    59 0000009A 0A0D                    	db 0x0a, 0x0d
    60 0000009C 00                      	db 0					; NULL
    61                                  bootmsg_end:
    62                                  
    63 0000009D B8E007                  	mov ax, FLOPPY_SEGMENT
    64 000000A0 8EC0                    	mov es, ax				; es:bx -> 읽기 시작할 메모리의 주소(bx는 0)
    65 000000A2 B500                    	mov ch, 0				; 실린더 0
    66 000000A4 B600                    	mov dh, 0				; 헤드 0
    67 000000A6 B102                    	mov cl, 2				; 섹터 2
    68                                  readloop:
    69 000000A8 BE0000                  	mov si, 0				; 읽기 실패 횟수를 세는 레지스터
    70                                  retry:
    71 000000AB B402                    	mov ah, 0x02			; ah=2 -> 읽기
    72 000000AD B001                    	mov al, 1				; 1섹터씩 읽음
    73 000000AF BB0000                  	mov bx, 0
    74 000000B2 B200                    	mov dl, 0				; 첫번째 플로피 디스크
    75 000000B4 CD13                    	int 0x13				; BIOS 호출
    76 000000B6 730E                    	jnc next				; 성공이면 next로
    77 000000B8 46                      	inc si					; 읽기 실패 횟수 증가
    78 000000B9 83FE05                  	cmp si, 5				; si와 5를 비교
    79 000000BC 732D                    	jae error				; 5 이상이면 에러 처리
    80 000000BE B400                    	mov ah, 0				; ah=0 -> 드라이브 리셋
    81 000000C0 B600                    	mov dh, 0				; 첫번째 플로피 디스크
    82 000000C2 CD13                    	int 0x13				; BIOS 호출
    83 000000C4 EBE5                    	jmp retry				; 다시 시도
    84                                  next:
    85 000000C6 8CC0                    	mov ax, es				; es:bx에 0x200을 더함
    86 000000C8 83C020                  	add ax, 0x20			; es는 세그먼트이기 때문에 0x20을 더함
    87 000000CB 8EC0                    	mov es, ax				; es는 세그먼트이기 때문에 ax를 경유해서 계산
    88 000000CD FEC1                    	inc cl					; 섹터 번호를 1증가
    89 000000CF 80F912                  	cmp cl, 18				; cl과 18을 비교
    90 000000D2 76D4                    	jbe readloop			; 18 이하라면 readloop로 jmp
    91 000000D4 B101                    	mov cl, 1				; 18 초과라면 섹터 번호를 1로
    92 000000D6 FEC6                    	inc dh					; 그리고 헤드 번호를 1증가
    93 000000D8 80FE02                  	cmp dh, 2				; dh와 2를 비교
    94 000000DB 72CB                    	jb readloop				; 2 미만이라면 readloop로 jmp
    95 000000DD B600                    	mov dh, 0				; 2 이상이라면 dh를 0으로
    96 000000DF FEC5                    	inc ch					; 실린더 번호를 증가
    97 000000E1 80FD0A                  	cmp ch, READ_CYLINDERS	; ch와 READ_CYLINDERS를 비교
    98 000000E4 72C2                    	jb readloop				; ch < READ_CYLINDERS(다 못읽었으면)
    99                                  							; readloop로 감
   100                                  
   101 000000E6 EA0000E00B              	jmp KERNEL_SEGMENT:0	; OS를 실행!
   102                                  
   103                                  error:						; 에러 처리 구문
   104 000000EB BE[0101]                	mov si, msg				; 에러 메세지의 주소
   105                                  putloop:
   106 000000EE 8A04                    	mov al, [si]			; 메세지의 한 글자 읽음
   107 000000F0 46                      	inc si					; si++
   108 000000F1 3C00                    	cmp al, 0				; al과 0을 비교
   109 000000F3 7409                    	je stop					; 0이면 stop으로 jmp
   110 000000F5 B40E                    	mov ah, 0x0e			; ah=0x0e -> 화면에 한 글자 출력
   111 000000F7 BB0F00                  	mov bx, 15				; 색 코드
   112 000000FA CD10                    	int 0x10				; BIOS 호출(al엔 글자 코드)
   113 000000FC EBF0                    	jmp putloop				; 루프를 돔
   114                                  stop:
   115 000000FE F4                      	hlt						; CPU를 일시정지
   116 000000FF EBFD                    	jmp stop				; 무한루프
   117                                  
   118                                  msg:
   119 00000101 0A0A                    	db 0x0a, 0x0a			; 개행 ASCII 코드
   120 00000103 436C7562636F733020-     	db "Clubcos0 load error, system halt"
   121 0000010C 6C6F6164206572726F-
   122 00000115 722C2073797374656D-
   123 0000011E 2068616C74         
   124 00000123 0A                      	db 0x0a
   125 00000124 00                      	db 0					; NULL
   126                                  
   127 00000125 00<rept>                times 510-($-$$) db 0
   128 000001FE 55AA                    dw 0xAA55
